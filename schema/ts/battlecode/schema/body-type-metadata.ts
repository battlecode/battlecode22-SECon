// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

import { BodyType } from '../../battlecode/schema/body-type';


/**
 * Metadata about all bodies of a particular type.
 */
export class BodyTypeMetadata {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
__init(i:number, bb:flatbuffers.ByteBuffer):BodyTypeMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsBodyTypeMetadata(bb:flatbuffers.ByteBuffer, obj?:BodyTypeMetadata):BodyTypeMetadata {
  return (obj || new BodyTypeMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsBodyTypeMetadata(bb:flatbuffers.ByteBuffer, obj?:BodyTypeMetadata):BodyTypeMetadata {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new BodyTypeMetadata()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():BodyType {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : BodyType.ROBOT;
}

actionCooldown():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
}

healthDecay():number {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

healthLimit():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startBodyTypeMetadata(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, type:BodyType) {
  builder.addFieldInt8(0, type, BodyType.ROBOT);
}

static addActionCooldown(builder:flatbuffers.Builder, actionCooldown:number) {
  builder.addFieldInt32(1, actionCooldown, 0);
}

static addHealthDecay(builder:flatbuffers.Builder, healthDecay:number) {
  builder.addFieldFloat32(2, healthDecay, 0.0);
}

static addHealthLimit(builder:flatbuffers.Builder, healthLimit:number) {
  builder.addFieldFloat32(3, healthLimit, 0.0);
}

static endBodyTypeMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createBodyTypeMetadata(builder:flatbuffers.Builder, type:BodyType, actionCooldown:number, healthDecay:number, healthLimit:number):flatbuffers.Offset {
  BodyTypeMetadata.startBodyTypeMetadata(builder);
  BodyTypeMetadata.addType(builder, type);
  BodyTypeMetadata.addActionCooldown(builder, actionCooldown);
  BodyTypeMetadata.addHealthDecay(builder, healthDecay);
  BodyTypeMetadata.addHealthLimit(builder, healthLimit);
  return BodyTypeMetadata.endBodyTypeMetadata(builder);
}
}
