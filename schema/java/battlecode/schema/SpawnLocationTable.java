// automatically generated by the FlatBuffers compiler, do not modify

package battlecode.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
/**
 * A list of new bodies to be placed on the map.
 */
public final class SpawnLocationTable extends Table {
  public static SpawnLocationTable getRootAsSpawnLocationTable(ByteBuffer _bb) { return getRootAsSpawnLocationTable(_bb, new SpawnLocationTable()); }
  public static SpawnLocationTable getRootAsSpawnLocationTable(ByteBuffer _bb, SpawnLocationTable obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public SpawnLocationTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The teams of the new spawn locations.
   */
  public byte teamIDs(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) : 0; }
  public int teamIDsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer teamIDsAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer teamIDsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The locations of the spawn locations.
   */
  public VecTable locs() { return locs(new VecTable()); }
  public VecTable locs(VecTable obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSpawnLocationTable(FlatBufferBuilder builder,
      int teamIDsOffset,
      int locsOffset) {
    builder.startObject(2);
    SpawnLocationTable.addLocs(builder, locsOffset);
    SpawnLocationTable.addTeamIDs(builder, teamIDsOffset);
    return SpawnLocationTable.endSpawnLocationTable(builder);
  }

  public static void startSpawnLocationTable(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addTeamIDs(FlatBufferBuilder builder, int teamIDsOffset) { builder.addOffset(0, teamIDsOffset, 0); }
  public static int createTeamIDsVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startTeamIDsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addLocs(FlatBufferBuilder builder, int locsOffset) { builder.addOffset(1, locsOffset, 0); }
  public static int endSpawnLocationTable(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

